# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and Deploy Trip Duration API to Azure Web App

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:

env:
  REGISTRY: tripdurationimage.azurecr.io
  IMAGE_NAME: durationcalculate
  APP_NAME: trip-duration-minute

jobs:
  # ----------------------
  # Continuous Integration
  # ----------------------
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 06-Azure
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Verify files exist
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          echo "Checking for requirements.txt:"
          test -f requirements.txt && echo "✓ requirements.txt found" || (echo "✗ requirements.txt not found" && exit 1)
          echo "Checking for app.py:"
          test -f app.py && echo "✓ app.py found" || echo "ℹ app.py not found (ok if your entrypoint is different)"
          echo "Checking for Dockerfile:"
          test -f Dockerfile && echo "✓ Dockerfile found" || (echo "✗ Dockerfile not found" && exit 1)

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint code
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run unit tests (optional)
        run: |
          echo "Running unit tests in $(pwd)"
          # python -m pytest tests/ -v

  # ----------------------------
  # Build and Push Docker Image
  # ----------------------------
  build:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: test
    defaults:
      run:
        working-directory: 06-Azure
    outputs:
      image-tag: ${{ steps.pick.outputs.deploy_tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Docker context
        run: |
          echo "Current directory: $(pwd)"
          ls -la
          test -f Dockerfile && echo "✓ Dockerfile found" || (echo "✗ Dockerfile not found" && exit 1)

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Using ACR admin credentials. Ensure ACR Admin user is enabled and secrets are set.
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      # Generate tags: latest + sha (for traceability)
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      # Choose ONE tag to deploy (simple: latest). You could switch to ${{ github.sha }} instead.
      - name: Pick deploy tag
        id: pick
        run: |
          echo "deploy_tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

      - name: Generate build summary
        run: |
          echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Tag:** ${{ steps.pick.outputs.deploy_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **All Pushed Tags:** ${{ steps.meta.outputs.tags }}, ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest:** ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY

  # --------------------------
  # Deploy to Azure Web App
  # --------------------------
  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
      url: https://${{ env.APP_NAME }}.azurewebsites.net
    steps:
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          slot-name: 'production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: ${{ needs.build.outputs.image-tag }}   # a single, exact tag

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          WEBAPP_URL="https://${{ env.APP_NAME }}.azurewebsites.net"
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            if curl -f -s "$WEBAPP_URL/health" > /dev/null 2>&1; then
              echo "✅ Deployment successful! App is responding at /health."
              exit 0
            elif curl -f -s "$WEBAPP_URL" > /dev/null 2>&1; then
              echo "✅ Deployment successful! App is responding at root."
              exit 0
            else
              echo "⏳ App not ready yet, waiting 30 seconds..."
              sleep 30
            fi
          done
          echo "❌ Health check failed after 5 attempts. Check Azure portal logs."
          exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **App Name:** ${{ env.APP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** production" >> $GITHUB_STEP_SUMMARY
          echo "- **URL:** https://${{ env.APP_NAME }}.azurewebsites.net" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY

  # --------------------------
  # Cleanup old images (stub)
  # --------------------------
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: success()
    steps:
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      - name: Cleanup old images
        run: |
          echo "Cleaning up old images (keeping last 10)..."
          echo "Add cleanup logic here with Azure CLI or ACR retention policies."
