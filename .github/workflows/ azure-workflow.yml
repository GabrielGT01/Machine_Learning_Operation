name: Build and Deploy Trip Duration API to Azure Web App

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  workflow_dispatch:

env:
  REGISTRY: tripdurationimage.azurecr.io
  IMAGE_NAME: durationcalculate
  REPOSITORY: durationcalculate
  APP_NAME: trip-duration-minute

jobs:
  # ----------------------
  # Continuous Integration
  # ----------------------
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 06-Azure
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Verify files exist (requirements, Dockerfile, app.py)
        run: |
          echo "Current dir: $(pwd)"
          ls -la
          test -f requirements.txt || (echo "❌ requirements.txt missing in 06-Azure" && exit 1)
          test -f Dockerfile       || (echo "❌ Dockerfile missing in 06-Azure" && exit 1)
          test -f app.py           || (echo "❌ app.py missing in 06-Azure" && exit 1)
          echo "✅ requirements.txt, Dockerfile, and app.py found"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint code
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # ----------------------------
  # Build and Push Docker Image
  # ----------------------------
  build:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.pick.outputs.deploy_tag }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Verify Docker context contains app.py
        run: |
          echo "Repo root: $(pwd)"
          ls -la 06-Azure/
          test -f 06-Azure/Dockerfile || (echo "❌ Dockerfile missing in 06-Azure" && exit 1)
          test -f 06-Azure/app.py     || (echo "❌ app.py missing in 06-Azure" && exit 1)
          echo "✅ Dockerfile and app.py present in 06-Azure"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate ACR secrets present
        run: |
          test -n "${{ secrets.AZURE_ACR_USERNAME }}" || (echo "AZURE_ACR_USERNAME missing" && exit 1)
          test -n "${{ secrets.AZURE_ACR_PASSWORD }}" || (echo "AZURE_ACR_PASSWORD missing" && exit 1)

      # ACR Admin credentials (no service principal)
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      - name: Build and push container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./06-Azure
          file: ./06-Azure/Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Pick deploy tag
        id: pick
        run: echo "deploy_tag=${{ env.REGISTRY }}/${{ env.REPOSITORY }}:latest" >> $GITHUB_OUTPUT

      - name: Build summary
        run: |
          echo "### Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ env.REGISTRY }}/${{ env.REPOSITORY }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deploy Tag:** ${{ steps.pick.outputs.deploy_tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **SHA Tag:** ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Digest:** ${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY

  # --------------------------
  # Deploy to Azure Web App
  # --------------------------
  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
    steps:
      # Publish profile auth (no SP)
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.APP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          images: ${{ needs.build.outputs.image-tag }}

      # ✅ Robust verify using the actual hostname from the deploy step; checks /form first
      - name: Verify deployment (robust)
        run: |
          WEBAPP_URL="${{ steps.deploy-to-webapp.outputs.webapp-url }}"
          echo "Checking $WEBAPP_URL ..."
          for i in {1..10}; do
            echo "Health check attempt $i/10..."

            CODE_FORM=$(curl -s -o /dev/null -w "%{http_code}" "$WEBAPP_URL/form")
            if [ "$CODE_FORM" -ge 200 ] && [ "$CODE_FORM" -lt 400 ]; then
              echo "✅ Healthy at /form ($CODE_FORM)"
              exit 0
            fi

            CODE_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" "$WEBAPP_URL/health")
            if [ "$CODE_HEALTH" -ge 200 ] && [ "$CODE_HEALTH" -lt 400 ]; then
              echo "✅ Healthy at /health ($CODE_HEALTH)"
              exit 0
            fi

            CODE_ROOT=$(curl -s -o /dev/null -w "%{http_code}" "$WEBAPP_URL")
            if [ "$CODE_ROOT" -ge 200 ] && [ "$CODE_ROOT" -lt 400 ]; then
              echo "✅ Healthy at / ($CODE_ROOT)"
              exit 0
            fi

            echo "⏳ Not ready yet (form=$CODE_FORM health=$CODE_HEALTH root=$CODE_ROOT). Sleeping 30s..."
            sleep 30
          done
          echo "❌ App not healthy after 10 attempts. Check Container logs in Azure."
          exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "### Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **App Name:** ${{ env.APP_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "- **URL (from deploy output):** ${{ steps.deploy-to-webapp.outputs.webapp-url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image:** ${{ needs.build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY

  # --------------------------
  # Cleanup old images (optional)
  # --------------------------
  cleanup:
    name: Cleanup Old Images
    runs-on: ubuntu-latest
    needs: [build, deploy]
    if: success()
    steps:
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.AZURE_ACR_USERNAME }}
          password: ${{ secrets.AZURE_ACR_PASSWORD }}

      - name: Cleanup old images
        run: |
          echo "Cleaning up old images (keeping last 10)..."
          echo "Add cleanup logic here with Azure CLI or ACR retention policies."
