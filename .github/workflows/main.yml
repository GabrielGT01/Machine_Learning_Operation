name: CI/CD Pipeline
on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 05-AWS
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      
      - name: Verify files exist
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Checking for requirements.txt:"
          test -f requirements.txt && echo "✓ requirements.txt found" || echo "✗ requirements.txt not found"
          echo "Checking for app.py:"
          test -f app.py && echo "✓ app.py found" || echo "✗ app.py not found"
          echo "Checking for Dockerfile:"
          test -f Dockerfile && echo "✓ Dockerfile found" || echo "✗ Dockerfile not found"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            echo "No requirements.txt found in 05-AWS directory"
            exit 1
          fi
      
      - name: Lint code
        run: |
          pip install flake8
          # Lint Python files in current directory (05-AWS)
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      
      - name: Run unit tests
        run: |
          echo "Running unit tests in $(pwd)"
          # Add your actual test commands here
          # python -m pytest tests/ || echo "No tests found"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: 05-AWS  # Set consistent working directory
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
        working-directory: .  # Override for this system-level step
      
      - name: Verify Docker context
        run: |
          echo "Current directory: $(pwd)"
          echo "Files available for Docker build:"
          ls -la
          echo "Checking for Dockerfile:"
          test -f Dockerfile && echo "✓ Dockerfile found" || echo "✗ Dockerfile not found"
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build docker container from current directory (already in 05-AWS)
          echo "Building Docker image in $(pwd)"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  continuous-deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Pull latest images
        run: |
          docker pull ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      
      - name: Stop and remove existing container
        run: |
          docker ps -q --filter "name=trip-duration-api" | grep -q . && docker stop trip-duration-api && docker rm -fv trip-duration-api || echo "No existing container found"
      
      - name: Run Docker Image to serve users
        run: |
          docker run -d \
            -p 9696:9696 \
            --name=trip-duration-api \
            --restart=unless-stopped \
            -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' \
            -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' \
            -e 'AWS_REGION=${{ secrets.AWS_REGION }}' \
            ${{ secrets.AWS_ECR_LOGIN_URI }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      
      - name: Verify deployment
        run: |
          sleep 10
          curl -f http://localhost:9696/health || exit 1
          echo "Deployment successful!"
      
      - name: Clean previous images and containers
        run: |
          docker system prune -f
